// What happens in normal deploy script
//imports
//main func
//calling of main function

//but the below deploy script is using hardhat-deploy so its gonna have imports but not the next 2 steps of main

// Syntax 1
// async function deployFunc(hre) {
//     console.log("Hi!")
//     hre.getNamedAccounts()
//     hre.deployments()
// }
// module.exports.default = deployFunc

// Syntax 2
// module.exports = async (hre) => {
//     const { getNamedAccounts, deployments } = hre
// }

// IMPORTANT : If we run our localnode when we have hardhat-deploy it will already deploy these contracts and then spin up the node.

const { network } = require("hardhat")
const { networkConfig, developmentChains } = require("../helper-hardhat-config")
const { verify } = require("../utils/verify")
require("dotenv").config()

// Syntax 3
module.exports = async ({ getNamedAccounts, deployments }) => {
    // deploy, log are functions
    // deployer is the address of the account
    console.log(`deployments: ${deployments}`)
    const { deploy, log } = deployments
    const { deployer } = await getNamedAccounts()
    const chainId = network.config.chainId

    // if chainId is X use address Y
    // if chainId is Z use address A

    // const ethUsdPriceFeedAddress = networkConfig[chainId]["ethUsdPriceFeed"]
    let ethUsdPriceFeedAddress
    if (developmentChains.includes(network.name)) {
        const ethUsdAggregator = await deployments.get("MockV3Aggregator") // to get the recently deployed contract address
        ethUsdPriceFeedAddress = ethUsdAggregator.target
    } else {
        ethUsdPriceFeedAddress = networkConfig[chainId]["ethUsdPriceFeed"]
    }

    // if the priceFeed contract doesn't exist, we deploy a minimal version of it for our local testing

    // well what happens when we want to change chains?
    // when going for localhost or hardhat network we want to use a mock
    const args = [ethUsdPriceFeedAddress]
    const fundMe = await deploy("FundMe", {
        from: deployer,
        args: args, // put price feed address
        log: true,
        waitConfirmations: network.config.blockConfirmations || 1,
    })

    if (
        !developmentChains.includes(network.name) &&
        process.env.ETHERSCAN_API_KEY
    ) {
        // verify
        await verify(fundMe.address, args)
    }

    log("-------------------------------------------")
}

module.exports.tags = ["all", "fundme"]
